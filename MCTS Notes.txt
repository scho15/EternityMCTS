Implemented with tree policy of sampling if epsilon < state visit count and greedy max if epsilon is small
state visit counts will need to be big (1000) before epsilon comes easily into play [e = 1000/(1000+svc)]
Tried average and maximum values as alternatives for "value" but decided that as "values" are meant to represent the most accurate final value, it was better using maximum rather than average
This is an "unusual" implementation for MCTS but hoping it works!!

Points to Try:
- Have used tiles checked once when MCST is appended rather than each time on consecutive matches
- Check for double rotation/solve two position problem in complete solutions
- 202 solution lost as was not part of terminal iteration - record solns > 200 as well. Tempting to also record outputs in Q.

Conclusion:
- Trial run with count cutoff work much better than sampling
- Having 2 runs rather than 1 helps to avoid some bad runs and early cutoff
- Completing from 90 looks good
- Terminal solution is not always the best so propagating early maxes up the tree

Notes
- 5 10K sample runs took 22500s (6 hours) 42350s for 2 x 50K
- 100K is 237s (4 mins) per steps and 39659s (11 hours) overall in OLD version
- 100K reduced to 14.3s per step and 7527s (2 hours 5m) through pre-loading matches for 2 tile patterms
- With 50K can see about 30 ahead at some points - useful for avoiding challenging areas (but still hard to see past hint or centre tiles)
- 100K looks to improve this to 35 but again blocks at 35, 45, 119 etc so backtrack is almost certainly helpful
- 250K took 19301s for 175 length run with early matches taking 1 minute but quicker for later iterations
- 500K was 33579s for 174 length (121s for early matches) and 39348s with average lookahead of 39.058 [locked on to 173 25 out]
- 10K lengths: 127, 142, 170, 143, 143, 159, 156
- 50K lengths: 119, 166
- 100K lengths: 163, 159, 169
- 250K length: 175, 169
- 500K length: 174, 173
with tweak on double rotation tiles [Still terrible compared with backtracking version]
- 10K lengths: 47, 148, 159, 119, 149, (average lookahead 22.532, 33.838, 30.038, 30.958, 30.799)
- 50K: 121,127 (average lookahead 34.543, 37.438)
- 100K: 149, 157, 175, 179, 172 (av 36.732, 34.643, 36.309, 36.737, 36.744)
- 250K: 179, 163, 159, 167, 174 (av 37.978, 39.264, 39,560, 37.323, 37.989) [5 hrs each]
- 500K: 167, 173, 180, 161, 173 (av 38.850, 41.809, 42.367, 38.932, 38.127) [11 hrs each]
- 1m: 171, 185 (av 42.713, 41.243) [81886s or 22 hours, 78198s]
Using full solution at 90 - will move away from sample check shortly to count cutoff method
- 250K 200,197, 196 (59147,33944,15698s)
Migration to cutoff method of 1m yields much better values but easier to get stuck on early tiles. Could be resolved
through several iterations. Really interesting to compare results! [Definitely the way to go]
- 1m cutoff: 194, 34, 194, 200, 195 (25s per iteration: 7393, 3281, 8625, 42188, 6562)
- 2 x 1m: 194, 194, 194, 197 (12924s, 13779, 14494, 13240, 37591)
- 2 x 5m: 196, 195, 194, 195, 194 (15513, 14959, 13828, 13610, 13709) Ave: 189.681, 193.033, 192.692, 193.363, 192.758
- 2 x 10m:200, 194 (147754, 134956)
- 5 x 2m: 197, 196, 194 (71520, 61096, 60889)